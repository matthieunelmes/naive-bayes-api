{"version":3,"sources":["../../src/service/index.js"],"names":["Service","Config","bayes","firebase","initializeApp","credential","cert","FIREBASE_SERVICE_ACCOUNT","databaseURL","FIREBASE_URL","_firebase","_classifier","prototype","createModel","model","callback","database","ref","push","then","response","key","catch","err","console","log","addModelTrainingItem","modelId","item","child","set","clearModelTrainingItems","deleteItems","items","forEach","once","snaps","snapshotsList","snapshots","clientInstagramSnapshots","snapshotLength","numChildren","on","snap","snapshotSnap","length","getModelTrainingItems","val","getModels","modelsSnap","getModel","modelSnap","classify","itemText","classifierJsonSnap","_trainedClassifier","fromJson","text","classification","categorize","probability","probabilities","getClassifier","testModel","percentage","correctResults","modelTrainingItems","itemsCount","toFixed","x","itemsTested","accuracy","trainModel","learn","toJson","module","exports"],"mappings":";;AAAA;;;;;;AAEA,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgC;;AAE9BC,0BAASC,aAAT,CAAuB;AACrBC,gBAAYF,wBAASE,UAAT,CAAoBC,IAApB,CAAyBL,OAAOM,wBAAhC,CADS;AAErBC,iBAAaP,OAAOQ;AAFC,GAAvB;;AAKA,MAAMC,YAAYP,uBAAlB;AACA,MAAMQ,cAAcT,OAApB;;AAEA;;;;;;AAMAF,UAAQY,SAAR,CAAkBC,WAAlB,GAAgC,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACnDL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,SAAzB,EAAoCC,IAApC,CAAyCJ,KAAzC,EAAgDK,IAAhD,CAAqD,UAAUC,QAAV,EAAoB;AACvEL,eAASK,SAASC,GAAlB;AACD,KAFD,EAEGC,KAFH,CAES,UAAUC,GAAV,EAAe;AACtBC,cAAQC,GAAR,CAAYF,GAAZ;AACAR,eAAS,KAAT;AACD,KALD;AAMD,GAPD;;AASE;;;;;;;AAOAf,UAAQY,SAAR,CAAkBc,oBAAlB,GAAyC,UAACC,OAAD,EAAUC,IAAV,EAAgBb,QAAhB,EAA6B;AACpEL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,qBAAzB,EAAgDC,IAAhD,CAAqDU,IAArD,EAA2DT,IAA3D,CAAgE,UAAUC,QAAV,EAAoB;AAClFV,gBAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,sBAA/C,EAAuEE,KAAvE,CAA6ET,SAASC,GAAtF,EAA2FS,GAA3F,CAA+F,IAA/F,EAAqGX,IAArG,CAA0G,YAAY;AACpHJ,iBAASK,SAASC,GAAlB;AACD,OAFD,EAEGC,KAFH,CAES,UAAUC,GAAV,EAAe;AACtBC,gBAAQC,GAAR,CAAYF,GAAZ;AACAR,iBAAS,KAAT;AACD,OALD;AAMD,KAPD;AAQD,GAzBH;;AA2BE;;;;;;;AAOAf,UAAQY,SAAR,CAAkBmB,uBAAlB,GAA4C,UAACJ,OAAD,EAAUZ,QAAV,EAAuB;AACjE,aAASiB,WAAT,CAAqBC,KAArB,EAA4B;AAC1BA,YAAMC,OAAN,CAAc,UAAUN,IAAV,EAAgB;AAC5BlB,kBAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,sBAA/C,EAAuEE,KAAvE,CAA6ED,KAAKP,GAAlF,EAAuFS,GAAvF,CAA2F,IAA3F,EAAiGX,IAAjG,CAAsG,YAAY;AAChHT,oBAAUM,QAAV,GAAqBC,GAArB,CAAyB,sBAAzB,EAAiDY,KAAjD,CAAuDD,KAAKP,GAA5D,EAAiES,GAAjE,CAAqE,IAArE,EAA2EX,IAA3E,CAAgF,YAAY;AAC1FJ,qBAAS,IAAT;AACD,WAFD,EAEGO,KAFH,CAES,UAAUC,GAAV,EAAe;AACtBC,oBAAQC,GAAR,CAAYF,GAAZ;AACAR,qBAAS,KAAT;AACD,WALD;AAMD,SAPD,EAOGO,KAPH,CAOS,UAAUC,GAAV,EAAe;AACtBC,kBAAQC,GAAR,CAAYF,GAAZ;AACAR,mBAAS,KAAT;AACD,SAVD;AAWD,OAZD;AAaD;;AAEDL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,sBAA/C,EAAuEQ,IAAvE,CAA4E,OAA5E,EAAqF,UAAUC,KAAV,EAAiB;AACpG,UAAIC,gBAAgB,EAApB;AACA,UAAIC,YAAY5B,UAAUM,QAAV,GAAqBC,GAArB,CAAyB,oBAAzB,CAAhB;AACA,UAAIsB,2BAA2B7B,UAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,sBAA/C,CAA/B;AACA,UAAIa,iBAAiBJ,MAAMK,WAAN,EAArB;AACAF,+BAAyBG,EAAzB,CAA4B,aAA5B,EAA2C,UAAUC,IAAV,EAAgB;AACzDL,kBAAUT,KAAV,CAAgBc,KAAKtB,GAArB,EAA0Bc,IAA1B,CAA+B,OAA/B,EAAwC,UAAUS,YAAV,EAAwB;AAC9DP,wBAAcnB,IAAd,CAAmB0B,YAAnB;AACA,cAAIP,cAAcQ,MAAd,KAAyBL,cAA7B,EAA6C;AAC3CR,wBAAYK,aAAZ;AACD;AACF,SALD;AAMD,OAPD;AAQD,KAbD;AAcD,GAjEH;;AAmEE;;;;;;AAMArC,UAAQY,SAAR,CAAkBkC,qBAAlB,GAA0C,UAACnB,OAAD,EAAUZ,QAAV,EAAuB;AAC/DL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,sBAA/C,EAAuEQ,IAAvE,CAA4E,OAA5E,EAAqF,UAAUC,KAAV,EAAiB;AACpG,UAAIC,gBAAgB,EAApB;AACA,UAAIC,YAAY5B,UAAUM,QAAV,GAAqBC,GAArB,CAAyB,oBAAzB,CAAhB;AACA,UAAIsB,2BAA2B7B,UAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,sBAA/C,CAA/B;AACA,UAAIa,iBAAiBJ,MAAMK,WAAN,EAArB;AACAF,+BAAyBG,EAAzB,CAA4B,aAA5B,EAA2C,UAAUC,IAAV,EAAgB;AACzDL,kBAAUT,KAAV,CAAgBc,KAAKtB,GAArB,EAA0Bc,IAA1B,CAA+B,OAA/B,EAAwC,UAAUS,YAAV,EAAwB;AAC9DP,wBAAcnB,IAAd,CAAmB0B,aAAaG,GAAb,EAAnB;AACA,cAAIV,cAAcQ,MAAd,KAAyBL,cAA7B,EAA6C;AAC3CzB,qBAASsB,aAAT;AACD;AACF,SALD;AAMD,OAPD;AAQD,KAbD;AAcD,GAxFH;;AA2FE;;;;;AAKArC,UAAQY,SAAR,CAAkBoC,SAAlB,GAA8B,UAACjC,QAAD,EAAc;AAC1CL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,QAAzB,EAAmCkB,IAAnC,CAAwC,OAAxC,EAAiD,UAAUc,UAAV,EAAsB;AACrElC,eAASkC,WAAWF,GAAX,EAAT;AACD,KAFD;AAGD,GApGH;;AAsGE;;;;;;AAMA/C,UAAQY,SAAR,CAAkBsC,QAAlB,GAA6B,UAACvB,OAAD,EAAUZ,QAAV,EAAuB;AAClDL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAArC,EAA8CQ,IAA9C,CAAmD,OAAnD,EAA4D,UAAUgB,SAAV,EAAqB;AAC/EpC,eAASoC,UAAUJ,GAAV,EAAT;AACD,KAFD;AAGD,GAhHH;;AAkHE;;;;;;;AAOA/C,UAAQY,SAAR,CAAkBwC,QAAlB,GAA6B,UAACzB,OAAD,EAAU0B,QAAV,EAAoBtC,QAApB,EAAiC;AAC5DL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,iBAA/C,EAAkEQ,IAAlE,CAAuE,OAAvE,EAAgF,UAAUmB,kBAAV,EAA8B;AAC5G,UAAMC,qBAAqBrD,MAAMsD,QAAN,CAAeF,mBAAmBP,GAAnB,EAAf,CAA3B;AACAhC,eACE;AACE0C,cAAMJ,QADR;AAEEK,wBAAgBH,mBAAmBI,UAAnB,CAA8BN,QAA9B;AAFlB,OADF;AAKD,KAPD;AAQD,GAlIH;;AAoIE;;;;;;;AAOArD,UAAQY,SAAR,CAAkBgD,WAAlB,GAAgC,UAACjC,OAAD,EAAU0B,QAAV,EAAoBtC,QAApB,EAAiC;AAC/DL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,iBAA/C,EAAkEQ,IAAlE,CAAuE,OAAvE,EAAgF,UAAUmB,kBAAV,EAA8B;AAC5G,UAAMC,qBAAqBrD,MAAMsD,QAAN,CAAeF,mBAAmBP,GAAnB,EAAf,CAA3B;AACAhC,eACE;AACE0C,cAAMJ,QADR;AAEEK,wBAAgBH,mBAAmBM,aAAnB,CAAiCR,QAAjC;AAFlB,OADF;AAKD,KAPD;AAQD,GApJH;;AAsJE;;;;;;AAMArD,UAAQY,SAAR,CAAkBkD,aAAlB,GAAkC,UAACnC,OAAD,EAAUZ,QAAV,EAAuB;AACvDL,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,iBAA/C,EAAkEQ,IAAlE,CAAuE,OAAvE,EAAgF,UAAUmB,kBAAV,EAA8B;AAC5GvC,eAASuC,mBAAmBP,GAAnB,EAAT;AACD,KAFD;AAGD,GAhKH;;AAkKE;;;;;;;AAOA/C,UAAQY,SAAR,CAAkBmD,SAAlB,GAA8B,UAACpC,OAAD,EAAUqC,UAAV,EAAsBjD,QAAtB,EAAmC;AAC/D,QAAIkD,iBAAiB,CAArB;AACA;AACAvD,cAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAAZ,GAAsB,iBAA/C,EAAkEQ,IAAlE,CAAuE,OAAvE,EAAgF,UAAUmB,kBAAV,EAA8B;AAC5G,UAAMC,qBAAqBrD,MAAMsD,QAAN,CAAeF,mBAAmBP,GAAnB,EAAf,CAA3B;AACA;AACA/C,cAAQY,SAAR,CAAkBkC,qBAAlB,CAAwCnB,OAAxC,EAAiD,UAAUuC,kBAAV,EAA8B;AAC7E,YAAMC,aAAa,CAACD,mBAAmBrB,MAAnB,IAA6BmB,aAAa,GAA1C,CAAD,EAAiDI,OAAjD,EAAnB;AACA;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,UAApB,EAAgCE,GAAhC,EAAqC;AACnC,cAAId,mBAAmBI,UAAnB,CAA8BO,mBAAmBG,CAAnB,EAAsBZ,IAApD,MAA8DS,mBAAmBG,CAAnB,EAAsBX,cAAxF,EAAwG;AACtGO;AACD;AACF;AACDlD,iBAAS;AACPuD,uBAAaH,UADN;AAEPI,oBAAU,CAACN,iBAAkBE,UAAlB,GAAgC,GAAjC,EAAsCC,OAAtC,CAA8C,CAA9C;AAFH,SAAT;AAID,OAZD;AAaD,KAhBD;AAiBD,GA7LH;;AA+LA;;;;;;AAMApE,UAAQY,SAAR,CAAkB4D,UAAlB,GAA+B,UAAC7C,OAAD,EAAUZ,QAAV,EAAuB;AACpDf,YAAQY,SAAR,CAAkBkC,qBAAlB,CAAwCnB,OAAxC,EAAiD,UAAUuC,kBAAV,EAA8B;AAC7E,WAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,mBAAmBrB,MAAvC,EAA+CwB,GAA/C,EAAoD;AAClD1D,oBAAY8D,KAAZ,CAAkBP,mBAAmBG,CAAnB,EAAsBZ,IAAxC,EAA8CS,mBAAmBG,CAAnB,EAAsBX,cAApE;AACD;AACD;AACAhD,gBAAUM,QAAV,GAAqBC,GAArB,CAAyB,YAAYU,OAArC,EAA8CE,KAA9C,CAAoD,gBAApD,EAAsEC,GAAtE,CAA0EnB,YAAY+D,MAAZ,EAA1E,EAAgGvD,IAAhG,CAAqG,YAAY;AAC/GJ,iBAAS,IAAT;AACD,OAFD,EAEGO,KAFH,CAES,UAAUC,GAAV,EAAe;AACtBC,gBAAQC,GAAR,CAAYF,GAAZ;AACAR,iBAAS,KAAT;AACD,OALD;AAMD,KAXD;AAYD,GAbD;AAeD;;AAED4D,OAAOC,OAAP,GAAiB5E,OAAjB","file":"index.js","sourcesContent":["import firebase from 'firebase-admin';\n\nfunction Service(Config, bayes) {\n\n  firebase.initializeApp({\n    credential: firebase.credential.cert(Config.FIREBASE_SERVICE_ACCOUNT),\n    databaseURL: Config.FIREBASE_URL\n  });\n\n  const _firebase = firebase;\n  const _classifier = bayes();\n\n  /**\n   * Creates a new model and saves it to the database\n   *\n   * @param  {Object} model Object of the model including name (string)\n   * @return {firebase UID} ID of the firebase model\n   */\n  Service.prototype.createModel = (model, callback) => {\n    _firebase.database().ref('models/').push(model).then(function (response) {\n      callback(response.key);\n    }).catch(function (err) {\n      console.log(err)\n      callback(false);\n    });\n  },\n\n    /**\n     * Creates a new, pre-trained item and saves it to the database\n     *\n     * @param  {firebase UID} modelId of the model to add the training item to\n     * @param  {Object} model Object of the model including name (string)\n     * @return {firebase UID} ID of the firebase model\n     */\n    Service.prototype.addModelTrainingItem = (modelId, item, callback) => {\n      _firebase.database().ref('modelTrainingItems/').push(item).then(function (response) {\n        _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').child(response.key).set(true).then(function () {\n          callback(response.key);\n        }).catch(function (err) {\n          console.log(err)\n          callback(false);\n        });\n      });\n    },\n\n    /**\n     * Deletes all pre-trained items for a particular model\n     *\n     * @param  {firebase UID} modelId of the model\n     * @param  {Object} model Object of the model including name (string)\n     * @return {boolean} operation completed successfully\n     */\n    Service.prototype.clearModelTrainingItems = (modelId, callback) => {\n      function deleteItems(items) {\n        items.forEach(function (item) {\n          _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').child(item.key).set(null).then(function () {\n            _firebase.database().ref('/modelTrainingItems/').child(item.key).set(null).then(function () {\n              callback(true);\n            }).catch(function (err) {\n              console.log(err)\n              callback(false);\n            });\n          }).catch(function (err) {\n            console.log(err)\n            callback(false);\n          });\n        });\n      }\n\n      _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').once('value', function (snaps) {\n        var snapshotsList = [];\n        var snapshots = _firebase.database().ref('modelTrainingItems');\n        var clientInstagramSnapshots = _firebase.database().ref('models/' + modelId + '/modelTrainingItems/');\n        var snapshotLength = snaps.numChildren();\n        clientInstagramSnapshots.on('child_added', function (snap) {\n          snapshots.child(snap.key).once('value', function (snapshotSnap) {\n            snapshotsList.push(snapshotSnap);\n            if (snapshotsList.length === snapshotLength) {\n              deleteItems(snapshotsList);\n            }\n          });\n        });\n      });\n    },\n\n    /**\n     * Retreives an array of pre-trained items for a model\n     *\n     * @param  {firebase UID} modelId of the model\n     * @return {Array [Object]} Array of pre-trained items\n     */\n    Service.prototype.getModelTrainingItems = (modelId, callback) => {\n      _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').once('value', function (snaps) {\n        var snapshotsList = [];\n        var snapshots = _firebase.database().ref('modelTrainingItems');\n        var clientInstagramSnapshots = _firebase.database().ref('models/' + modelId + '/modelTrainingItems/');\n        var snapshotLength = snaps.numChildren();\n        clientInstagramSnapshots.on('child_added', function (snap) {\n          snapshots.child(snap.key).once('value', function (snapshotSnap) {\n            snapshotsList.push(snapshotSnap.val());\n            if (snapshotsList.length === snapshotLength) {\n              callback(snapshotsList);\n            }\n          });\n        });\n      });\n    },\n\n\n    /**\n     * Retreives an array of models\n     *\n     * @return {Array [Object]} Array of models\n     */\n    Service.prototype.getModels = (callback) => {\n      _firebase.database().ref('models').once('value', function (modelsSnap) {\n        callback(modelsSnap.val());\n      });\n    },\n\n    /**\n     * Retreives a model by it's Id\n     *\n     * @param  {firebase UID} modelId of the model\n     * @return {Object} Model\n     */\n    Service.prototype.getModel = (modelId, callback) => {\n      _firebase.database().ref('models/' + modelId).once('value', function (modelSnap) {\n        callback(modelSnap.val());\n      });\n    },\n\n    /**\n     * Classify an item using a specific model\n     *\n     * @param  {firebase UID} modelId of the model\n     * @param  {string} itemText string to classify\n     * @return {Object} classification\n     */\n    Service.prototype.classify = (modelId, itemText, callback) => {\n      _firebase.database().ref('models/' + modelId + '/classifierJson').once('value', function (classifierJsonSnap) {\n        const _trainedClassifier = bayes.fromJson(classifierJsonSnap.val());\n        callback(\n          {\n            text: itemText,\n            classification: _trainedClassifier.categorize(itemText)\n          });\n      });\n    },\n\n    /**\n     * Classify an item using a specific model\n     *\n     * @param  {firebase UID} modelId of the model\n     * @param  {string} itemText string to classify\n     * @return {Object} probability\n     */\n    Service.prototype.probability = (modelId, itemText, callback) => {\n      _firebase.database().ref('models/' + modelId + '/classifierJson').once('value', function (classifierJsonSnap) {\n        const _trainedClassifier = bayes.fromJson(classifierJsonSnap.val());\n        callback(\n          {\n            text: itemText,\n            classification: _trainedClassifier.probabilities(itemText)\n          });\n      });\n    },\n\n    /**\n    * Get Classifier from DB\n    *\n    * @param  {firebase UID} modelId of the model\n    * @return {Object} classifier\n    */\n    Service.prototype.getClassifier = (modelId, callback) => {\n      _firebase.database().ref('models/' + modelId + '/classifierJson').once('value', function (classifierJsonSnap) {\n        callback(classifierJsonSnap.val());\n      });\n    },\n\n    /**\n    * Loads a model from the saved Json Classifier, then runs 15% of pre-trained items to test accuracy\n    *\n    * @param  {firebase UID} modelId of the model\n    * @param  {number} percentage of items to test, default to 15%\n    * @return {number} accuracy %\n    */\n    Service.prototype.testModel = (modelId, percentage, callback) => {\n      let correctResults = 0;\n      // Load the saved Json Classifier for the model\n      _firebase.database().ref('models/' + modelId + '/classifierJson').once('value', function (classifierJsonSnap) {\n        const _trainedClassifier = bayes.fromJson(classifierJsonSnap.val());\n        // Grab items to test\n        Service.prototype.getModelTrainingItems(modelId, function (modelTrainingItems) {\n          const itemsCount = (modelTrainingItems.length * (percentage / 100)).toFixed();\n          // Foreach item, test it and compare against its pre-trained classifications\n          for (var x = 0; x < itemsCount; x++) {\n            if (_trainedClassifier.categorize(modelTrainingItems[x].text) === modelTrainingItems[x].classification) {\n              correctResults++\n            }\n          }\n          callback({\n            itemsTested: itemsCount,\n            accuracy: (correctResults / (itemsCount) * 100).toFixed(2)\n          });\n        });\n      });\n    }\n\n  /**\n   * Train a model with it's pre-trained items and save its classifier to Json in the database\n   *\n   * @param  {firebase UID} modelId of the model\n   * @return {boolean} operation completed\n   */\n  Service.prototype.trainModel = (modelId, callback) => {\n    Service.prototype.getModelTrainingItems(modelId, function (modelTrainingItems) {\n      for (var x = 0; x < modelTrainingItems.length; x++) {\n        _classifier.learn(modelTrainingItems[x].text, modelTrainingItems[x].classification);\n      }\n      //Save classifier to Json\n      _firebase.database().ref('models/' + modelId).child('classifierJson').set(_classifier.toJson()).then(function () {\n        callback(true);\n      }).catch(function (err) {\n        console.log(err)\n        callback(false);\n      });\n    });\n  }\n\n}\n\nmodule.exports = Service;"]}