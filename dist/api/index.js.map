{"version":3,"sources":["../../src/api/index.js"],"names":["classifier","Config","Service","service","bayes","Classifier","api","get","req","res","getModels","response","end","JSON","stringify","getModel","params","id","post","newModel","body","name","createModel","status","json","newTrainingItem","addModelTrainingItem","modelId","trainModel","percentageToTest","testModel","item","text","classify","probability"],"mappings":"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","file":"index.js","sourcesContent":["import Config from '../config';\nimport service from '../service';\nimport bayes from 'bayes';\nimport { Router } from 'express';\n\n\nfunction classifier(Config) {\n    this.Service = new service(Config, bayes);\n}\n\n\nexport default () => {\n\n    const Classifier = new classifier(Config);\n    const api = Router();\n\n    //Get Models\n    api.get('/models', function (req, res) {\n        Classifier.Service.getModels(function (response) {\n            res.end(JSON.stringify(response));\n        });\n    });\n\n\n    //Get Model\n    api.get('/model/:id', function (req, res) {\n        Classifier.Service.getModel(req.params.id, function (response) {\n            res.end(JSON.stringify(response));\n        });\n    });\n\n\n    //Create Model\n    api.post('/model', function (req, res) {\n        var newModel = req.body;\n        if (newModel.name) {\n            Classifier.Service.createModel(newModel, function (response) {\n                res.end(JSON.stringify(response));\n            });\n        } else {\n            res.status(400).json(\"parameter name is required\");\n        }\n    });\n\n    //Add Model training item\n    api.post('/model/:id/addItem', function (req, res) {\n        var newTrainingItem = req.body;\n        if (req.params.id) {\n            Classifier.Service.addModelTrainingItem(newTrainingItem.modelId, newTrainingItem, function (response) {\n                res.end(JSON.stringify(response));\n            });\n        } else {\n            res.status(400).json(\"parameter modelId is required\");\n        }\n    });\n\n    //Train model\n    api.get('/model/:id/train', function (req, res) {\n        if (req.params.id) {\n            Classifier.Service.trainModel(req.params.id, function (response) {\n                res.end(JSON.stringify(response));\n            });\n        } else {\n            res.status(400).json(\"parameter modelId is required\");\n        }\n    });\n\n    //Test model\n    api.get('/model/:id/test', function (req, res) {\n        if (req.params.id) {\n            const percentageToTest = 15; //TODO allow users to specific test size, defaults to 15%\n            Classifier.Service.testModel(req.params.id, percentageToTest, function (response) {\n                res.end(JSON.stringify(response));\n            });\n        } else {\n            res.status(400).json(\"parameter modelId is required\");\n        }\n    });\n\n    // \n    api.post('/model/:id/classify', function (req, res) {\n        var item = req.body;\n        if (req.params.id && item.text) {\n            Classifier.Service.classify(req.params.id, item.text, function (response) {\n                res.end(JSON.stringify(response));\n            });\n        } else {\n            res.status(400).json(\"parameter modelId and text is required\");\n        }\n    });\n\n    //Get Probability\n    api.post('/model/:id/probability', function (req, res) {\n        var item = req.body;\n        if (req.params.id && item.text) {\n            Classifier.Service.probability(req.params.id, item.text, function (response) {\n                res.end(JSON.stringify(response));\n            });\n        } else {\n            res.status(400).json(\"parameter modelId and text is required\");\n        }\n    });\n    return api\n}\n\n\n\n"]}