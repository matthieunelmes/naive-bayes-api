{"version":3,"sources":["../../../src/classifier/services/modelService.js"],"names":["ModelService","firebase","bayes","_firebase","_classifier","prototype","createModel","model","callback","database","ref","push","then","response","key","catch","err","addModelTrainingItem","modelId","item","child","set","res","clearModelTrainingItems","deleteItems","items","forEach","once","snaps","snapshotsList","snapshots","clientInstagramSnapshots","snapshotLength","numChildren","on","snap","snapshotSnap","length","getModelTrainingItems","val","getModels","modelsSnap","getModel","modelSnap","classify","itemText","classifierJsonSnap","_trainedClassifier","fromJson","text","classification","categorize","probability","probabilities","trainModel","modelTrainingItems","x","learn","toJson","module","exports"],"mappings":"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","file":"modelService.js","sourcesContent":["/*jshint esversion: 6 */\n\nfunction ModelService(firebase, bayes) {\n\n  const _firebase = firebase;\n  const _classifier = bayes();\n\n  /**\n   * Creates a new model and saves it to the database\n   *\n   * @param  {Object} model Object of the model including name (string)\n   * @return {firebase UID} ID of the firebase model\n   */\n  ModelService.prototype.createModel = (model, callback) => {\n    _firebase.database().ref('models/').push(model).then(function (response) {\n      callback(response.key);\n    }).catch(function (err) {\n      callback(false);\n    });\n  },\n\n    /**\n     * Creates a new, pre-trained item and saves it to the database\n     *\n     * @param  {firebase UID} modelId of the model to add the training item to\n     * @param  {Object} model Object of the model including name (string)\n     * @return {firebase UID} ID of the firebase model\n     */\n    ModelService.prototype.addModelTrainingItem = (modelId, item, callback) => {\n      _firebase.database().ref('modelTrainingItems/').push(item).then(function (response) {\n        _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').child(response.key).set(true).then(function (res) {\n          callback(response.key);\n        }).catch(function (err) {\n          callback(false);\n        });\n      });\n    },\n\n    /**\n     * Deletes all pre-trained items for a particular model\n     *\n     * @param  {firebase UID} modelId of the model\n     * @param  {Object} model Object of the model including name (string)\n     * @return {boolean} operation completed successfully\n     */\n    ModelService.prototype.clearModelTrainingItems = (modelId, callback) => {\n      function deleteItems(items) {\n        items.forEach(function (item) {\n          _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').child(item.key).set(null).then(function () {\n            _firebase.database().ref('/modelTrainingItems/').child(item.key).set(null).then(function (response) {\n              callback(true);\n            }).catch(function (err) {\n              callback(false);\n            });\n          }).catch(function (err) {\n            callback(false);\n          });\n        });\n      }\n\n      _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').once('value', function (snaps) {\n        var snapshotsList = [];\n        var snapshots = _firebase.database().ref('modelTrainingItems');\n        var clientInstagramSnapshots = _firebase.database().ref('models/' + modelId + '/modelTrainingItems/');\n        var snapshotLength = snaps.numChildren();\n        clientInstagramSnapshots.on('child_added', function (snap) {\n          snapshots.child(snap.key).once('value', function (snapshotSnap) {\n            snapshotsList.push(snapshotSnap);\n            if (snapshotsList.length === snapshotLength) {\n              deleteItems(snapshotsList);\n            }\n          });\n        });\n      });\n    },\n\n    /**\n     * Retreives an array of pre-trained items for a model\n     *\n     * @param  {firebase UID} modelId of the model\n     * @return {Array [Object]} Array of pre-trained items\n     */\n    ModelService.prototype.getModelTrainingItems = (modelId, callback) => {\n      _firebase.database().ref('models/' + modelId + '/modelTrainingItems/').once('value', function (snaps) {\n        var snapshotsList = [];\n        var snapshots = _firebase.database().ref('modelTrainingItems');\n        var clientInstagramSnapshots = _firebase.database().ref('models/' + modelId + '/modelTrainingItems/');\n        var snapshotLength = snaps.numChildren();\n        clientInstagramSnapshots.on('child_added', function (snap) {\n          snapshots.child(snap.key).once('value', function (snapshotSnap) {\n            snapshotsList.push(snapshotSnap.val());\n            if (snapshotsList.length === snapshotLength) {\n              callback(snapshotsList);\n            }\n          });\n        });\n      });\n    },\n\n\n    /**\n     * Retreives an array of models\n     *\n     * @return {Array [Object]} Array of models\n     */\n    ModelService.prototype.getModels = (callback) => {\n      _firebase.database().ref('models').once('value', function (modelsSnap) {\n        callback(modelsSnap.val());\n      });\n    },\n\n    /**\n     * Retreives a model by it's Id\n     *\n     * @param  {firebase UID} modelId of the model\n     * @return {Object} Model\n     */\n    ModelService.prototype.getModel = (modelId, callback) => {\n      _firebase.database().ref('models/' + modelId).once('value', function (modelSnap) {\n        callback(modelSnap.val());\n      });\n    },\n\n    /**\n     * Classify an item using a specific model\n     *\n     * @param  {firebase UID} modelId of the model\n     * @param  {string} itemText string to classify\n     * @return {Object} classification\n     */\n    ModelService.prototype.classify = (modelId, itemText, callback) => {\n      _firebase.database().ref('models/' + modelId + '/classifierJson').once('value', function (classifierJsonSnap) {\n        const _trainedClassifier = bayes.fromJson(classifierJsonSnap.val());\n        callback(\n          {\n            text: itemText,\n            classification: _trainedClassifier.categorize(itemText)\n          });\n      });\n    },\n\n  /**\n   * Classify an item using a specific model\n   *\n   * @param  {firebase UID} modelId of the model\n   * @param  {string} itemText string to classify\n   * @return {Object} probability\n   */\n    ModelService.prototype.probability = (modelId, itemText, callback) => {\n      _firebase.database().ref('models/' + modelId + '/classifierJson').once('value', function (classifierJsonSnap) {\n        const _trainedClassifier = bayes.fromJson(classifierJsonSnap.val());\n        callback(\n          {\n            text: itemText,\n            classification: _trainedClassifier.probabilities(itemText)\n          });\n      });\n    },\n\n    /**\n     * Train a model with it's pre-trained items and save its classifier to Json in the database\n     *\n     * @param  {firebase UID} modelId of the model\n     * @return {boolean} operation completed\n     */\n    ModelService.prototype.trainModel = (modelId, callback) => {\n      ModelService.prototype.getModelTrainingItems(modelId, function (modelTrainingItems) {\n        for (var x = 0; x < modelTrainingItems.length; x++) {\n          _classifier.learn(modelTrainingItems[x].text, modelTrainingItems[x].classification);\n        }\n        //Save classifier to Json\n        _firebase.database().ref('models/' + modelId).child('classifierJson').set(_classifier.toJson()).then(function (response) {\n          callback(true);\n        }).catch(function (err) {\n          callback(false);\n        });\n      });\n    }\n\n}\n\nmodule.exports = ModelService;"]}